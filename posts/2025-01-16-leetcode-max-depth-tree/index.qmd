---
title: "Maximum depth of a binary tree"
description: "My solution to leetcode problem 104"
author:
  - name: Rashmin Chitale
    url: 
date: 01-16-2025
categories: [leetcode,R] # self-defined categories
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

```{r setup, include=FALSE}
library(R6)
```

# The binary tree

A binary tree is a type of data structure. It is pretty well defined.

::: {.callout-note}
## What is a binary tree?
A binary tree data structure is a hierarchical data structure in which each `node` has at most two `children`, referred to as the `left child` and the `right child`.
:::

This might be better seen through some examples.

In the tree below, 2 is the left child of 1, and 3 is the right child of 1. Similarly, 4 is the left child of 2 and 5 is the right child of 2. Finally, 6 is the left child of 3, and 7 is the right child of 3.

```{mermaid}
%%| label: fig-figure1
%%| fig-align: center
---
title: Tree1
---
graph TD
  A((01)) --> B((02))
  A((01)) --> C((03))
  B((02)) --> D((04))
  B((02)) --> E((05))
  C((03)) --> F((06))
  C((03)) --> G((07))
  
```

Here is another tree. 

```{mermaid}
%%| label: fig-figure2
%%| fig-align: center
---
title: Tree2
---
graph TD
    A((08))-->B((03))
    A-->C((10))
    B-->D((01))
    B-->E((06))
    C-->F((09))
    C-->G((14))
    E-->H((04))
    E-->I((07))
  
```

And another tree which is different to the other two

```{mermaid}
%%| label: fig-figure3
%%| fig-align: center
---
title: Tree3
---
graph TD
    A((01))-->B((02))
    A-->C((03))
    B-->D((04))
    B-->E((05))
    C-->F((06))
    C-->G((07))
    D-->H((08))
    D-->I((09))
    F-->J((10))
    F-->K((11))
  
```

So a binary tree is simply a layer of connected nodes, where each node is either the left or right child of another node. Note there can also only be one root node. 

# The tree data structure

The tree data structure can be implemented using the reference class system using the `R6 package`. To make a tree, a node is created with attributes, left, right and value. These left and right attributes are initialized as being null, while the value is a numeric.

```{r}
Node = R6Class(
  classname = "Node", 
  public = list(
    left = NA,
    right = NA,
    value = "numeric",
    initialize =
      function(left = NA, right = NA, value = NA){
        self$left = left
        self$right = right
        self$value = value
      }
  )
)
```

The idea is that by nesting nodes, a tree can be created

```{r}

##### Here is tree 1 from earlier #####

tree1 = Node$new(value = 1)
tree1[["left"]] = Node$new(value = 2)
tree1[["right"]] = Node$new(value = 3)
tree1[["left"]][["left"]] = Node$new(value = 4) 
tree1[["left"]][["right"]] = Node$new(value = 5)
tree1[["right"]][["left"]] = Node$new(value = 6)
tree1[["right"]][["right"]] = Node$new(value = 7)

##### Another tree... #####

tree2 = Node$new(value = 1)
tree2[["left"]] = Node$new(value = 2)
tree2[["right"]] = Node$new(value = 3)

##### And another tree as well... #####

tree3 = Node$new(value = 1)
tree3[["left"]] = Node$new(value = 2)
tree3[["left"]][["left"]] = Node$new(value = 3) 
tree3[["left"]][["left"]][["left"]] = Node$new(value = 4) 
tree3[["left"]][["left"]][["left"]][["left"]] = Node$new(value = 5) 

```

# Maximum depth of a tree

Leetcode defines the depth of the tree as below

::: {.callout-note}
## What is the maximum depth of a tree?
A binary tree's `maximum depth` is the `number` of `nodes` along the `longest path` from the `root` node down to the farthest `leaf` node.
:::

This way of defining a tree means than a tree with a single node has a depth of 1. A null tree then has a depth of 0. The coded tree's above have depths of 3, 2 and 5. 

I present my code for the algorithm that calculates the maximum depth. 

```{r}
Tree = R6Class(
  classname = "Tree",
  public = list(
  depth = "double",
  initialize = function(depth = -Inf){
    self$depth = depth
  },
  max.depth = 
    function(tree, cdepth = 0){
    
    #check for null case  
    if(is.null(tree)){
      self$depth = 0
      return()
    }
      
    #increase current depth by 1  
    up.depth = cdepth + 1
    
    #compare to global depth and increase if larger
    if(up.depth > self$depth){
      self$depth = up.depth
    }
    
    #check for nullity of children nodes
    left.na = !is.environment(tree$left) & is.environment(tree$right)
    right.na = is.environment(tree$left) & !is.environment(tree$right)
    both.na = !is.environment(tree$left) & !is.environment(tree$right)
    
    #choose what type of recursion to carry out
    if(left.na == TRUE){
      self$max.depth(tree$right, cdepth = up.depth)
    } else if(right.na == TRUE){
      self$max.depth(tree$left, cdepth = up.depth)
    } else if (both.na == TRUE){
      return()
    } else {
      self$max.depth(tree$right, cdepth = up.depth)
      self$max.depth(tree$left, cdepth = up.depth)
    }
  },
  max_depth =
    function(tree){
      self$max.depth(tree)
      return(self$depth)
    }
))
```

I started by defining a class, `Tree` with attribute `depth` as double initialized as being $-\infty$. I also create two methods `max.depth`, which finds the max depth of a tree, and a dummy method `max_depth` for printing the result of the first method. 

The first method is the primary operator; `max.depth` is a recursive function that works in the following way

The arguments of the function are a tree (to be inputted in), and depth which is initialized as 0. The function first checks for the edge case of a null tree; if a null tree is inputted, it returns the initialized depth of 0. 

The current depth is increased by 1 to make the 'up depth'. The up depth is then compared to the global depth stored as an attribute. If it greater, the attribute value is updated with the up deth value. If not, it is kept the same.

The function then checks the structure of the children node for the current tree. A binary tree can have a left node only, right node only or both children nodes. The structure is stored as several logicals indicating which of the above cases are true. A nested if statement is then used to carry out recursion depending on the child structure

If only a single child node exists, that being the left or right, the function is called recursively with updated input arguments on that child node. What this means is that, the input tree is updated to the tree stored in the left or right attribute of the current node. The depth fed in the recursive call is also the up depth. 

If both children node exist, the recursive call is made on both the left and right child node, with the updated trees being fed through likewise. If the current node has no children, then the stopping condition takes place, which is to return nothing.

In this way, the function simply recursively descends down a tree, and compares its current depth to the global depth, updating that value when neccessary. 

The second method simply runs the first method, and prints it result. 

Here are some test cases.

```{r}

##### Test case 1... #####

tree1 = c()
Tree$new()$max_depth(tree1)

##### Test case 2... #####

tree2 = Node$new(value = 1)
Tree$new()$max_depth(tree2)

##### Test case 3... #####

tree3 = Node$new(value = 1)
tree3[["left"]] = Node$new(value = 2)
tree3[["right"]] = Node$new(value = 3)
Tree$new()$max_depth(tree3)

##### Test case 4... #####

tree4 = Node$new(value = 1)
tree4[["left"]] = Node$new(value = 2)
tree4[["left"]][["left"]] = Node$new(value = 3) 
tree4[["left"]][["left"]][["left"]] = Node$new(value = 4) 
tree4[["left"]][["left"]][["left"]][["left"]] = Node$new(value = 5) 
Tree$new()$max_depth(tree4)

##### Test case 5... #####

tree5 = Node$new(value = 1)
tree5[["left"]] = Node$new(value = 2)
tree5[["right"]] = Node$new(value = 3)
tree5[["left"]][["left"]] = Node$new(value = 4) 
tree5[["left"]][["right"]] = Node$new(value = 5)
tree5[["right"]][["left"]] = Node$new(value = 6)
tree5[["right"]][["right"]] = Node$new(value = 7)
Tree$new()$max_depth(tree5)

```















